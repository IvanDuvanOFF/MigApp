/*
 * 
 * 
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
// import Passwords from '../model/Passwords';
// import RefreshTokenRequest from '../model/RefreshTokenRequest';
// import SignRequest from '../model/SignRequest';
import SignResponse from '../model/SignResponse';
// import VerificationRequest from '../model/VerificationRequest';

/**
* AuthenticationController service.
* @module api/AuthenticationControllerApi
* @version 1.0.0
*/
export default class AuthenticationControllerApi {

    /**
    * Constructs a new AuthenticationControllerApi. 
    * @alias module:api/AuthenticationControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the block operation.
     * @callback moduleapi/AuthenticationControllerApi~blockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Запрос на восстановление пароля
     * Пользователь вводит email и ждет получения ссылки для восстановления пароля
     * @param {String} body 
     * @param {module:api/AuthenticationControllerApi~blockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    block(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling block");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/auth/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the refresh operation.
     * @callback moduleapi/AuthenticationControllerApi~refreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновление JWT-токена
     * Клиент отправляет запрос, когда у токкена выходит срок годности
     * @param {module:model/RefreshTokenRequest} body 
     * @param {module:api/AuthenticationControllerApi~refreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    refresh(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refresh");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SignResponse;

      return this.apiClient.callApi(
        '/api/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the restore operation.
     * @callback moduleapi/AuthenticationControllerApi~restoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Пользователь восстанавливает доступ
     * Пользователь вводит новый пароль и восстанавливает доступ к аккаунту
     * @param {module:model/Passwords} body 
     * @param {String} token 
     * @param {module:api/AuthenticationControllerApi~restoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restore(body, token, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling restore");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling restore");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/auth/restore/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the signIn operation.
     * @callback moduleapi/AuthenticationControllerApi~signInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Авторизация пользователя
     * Пользователь вводит логин и пароль и получает JWT-токен. Если у пользователя включена 2х факторная аутентификация, приходит соответсвующий ответ
     * @param {module:model/SignRequest} body 
     * @param {module:api/AuthenticationControllerApi~signInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    signIn(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signIn");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SignResponse;

      return this.apiClient.callApi(
        '/api/auth/signing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifySignIn operation.
     * @callback moduleapi/AuthenticationControllerApi~verifySignInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Проверка кода 2х факторной аутентификации
     * Пользователь вводит код, полученный на электронную почту
     * @param {module:model/VerificationRequest} body 
     * @param {module:api/AuthenticationControllerApi~verifySignInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verifySignIn(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifySignIn");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SignResponse;

      return this.apiClient.callApi(
        '/api/auth/signing/tfa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}