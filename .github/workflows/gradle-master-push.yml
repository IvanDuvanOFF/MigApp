name: Master push CI/CD

on:
  push:
    branches: [ "master" ]

jobs:
  build-test:
    name: Compile and test application

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Generate firebase key
        run: |
          mkdir -p ./backend/src/main/resources/firebase
          mkdir -p ./backend/src/test/resources/firebase
          echo "$KEY" > ./backend/src/main/resources/firebase/firebase-key.json
          echo "$KEY" > ./backend/src/test/resources/firebase/firebase-key.json
        shell: bash
        env:
          KEY: ${{ secrets.FIREBASE_SECRET }}

      - name: Grand executive permission for gradlew
        working-directory: ./backend
        run: chmod +x ./gradlew

      - name: Gradlew clean
        working-directory: ./backend
        run: ./gradlew clean

#      - name: Gradlew test run
#        id: test
#        working-directory: ./backend
#        run: ./gradlew test

#      - name: Successful tests
#        if: steps.test.outcome != 'success'
#        run: |
#          echo "Tests error"
#          exit 1

      - name: Successful build
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ME }}
          token: ${{ secrets.TELEGRAM_NOT }}
          message: |
            ✅ Application tests done
            Check report on https://github.com/${{ github.repository }}/actions

      - name: Send alert in Telegram
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ME }}
          token: ${{ secrets.TELEGRAM_NOT }}
          message: |
            ❌ Tests failed
            Check report on https://github.com/${{ github.repository }}/actions

  send-project:
    name: Sends project to server

    runs-on: ubuntu-latest
    needs:
      - build-test
    steps:
      - uses: actions/checkout@v4
      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Archive project
        working-directory: .
        run: |
          zip -qq -r mig-app.zip . -x "*.git*" -x "*.idea*"
        shell: bash

      # - uses: vimtor/action-zip@v1.2
      #   with:
      #     files: .
      #     recursive: true
      #     dest: mig-app.zip

      - name: echo
        working-directory: .
        run: |
          ls -la
        shell: bash

      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "./mig-app.zip"
          target: "/home/admin/app/mig-app.zip"

  docker-build:
    name: Build docker image and send it to DockerHub

    runs-on: ubuntu-latest
    needs:
      - build-test

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Dashboard to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/docker/dev/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

  deploy:
    name: Deploy project to server

    needs:
      - send-project

    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          envs: DOCKERHUB_USER,DOCKER_IMAGE
          script: |
            cd /home/admin/app/mig-app
            docker compose -f compose.yaml down
            cd ../
            rm -rf ./mig-app

            mkdir ./mig-app
            unzip ./mig-app.zip -d ./mig-app
            cd ./mig-app
            
            docker compose -f compose-setup.yaml up -d nginx 
            docker compose -f compose-setup.yaml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot --email ivan.duvanov.3@gmail.com --agree-tos --no-eff-email -d db.cute-example-deeplom.ru -d www.db.cute-example-deeplom.ru --preferred-challenges http
            docker compose -f compose-setup.yaml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot --email ivan.duvanov.3@gmail.com --agree-tos --no-eff-email -d graf.cute-example-deeplom.ru -d www.graf.cute-example-deeplom.ru --preferred-challenges http
            docker compose -f compose-setup.yaml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot --email ivan.duvanov.3@gmail.com --agree-tos --no-eff-email -d cute-example-deeplom.ru -d www.cute-example-deeplom.ru --preferred-challenges http
            docker compose -f compose-setup.yaml down nginx
            
            docker compose -f compose.yaml up -d --build > build-logs.txt
            
            echo "0 9 * * 1 /usr/bin/docker compose -f /home/admin/app/mig-app/compose-setup.yaml run certbot renew >> /var/log/renew-ssl.log && /usr/bin/docker compose -f /home/admin/app/mig-app/compose.yaml kill -s SIGHUP nginx" | crontab -

      - name: Successful tests
        if: steps.deploy.outcome != 'success'
        run: |
          echo "Tests error"
          exit 1

      - name: Successful deploy
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ME }}
          token: ${{ secrets.TELEGRAM_NOT }}
          message: |
            ✅ Application deploy done
            Check it on link:
            https://${{ secrets.SERVER_DOMAIN }}/actuator/health

      - name: Send alert in Telegram
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ME }}
          token: ${{ secrets.TELEGRAM_NOT }}
          message: |
            ❌ Application deploy failed
            Check report on https://github.com/${{ github.repository }}/actions
