version: '3.8'

services:
  api-backup:
    image: api-backup
    container_name: api-backup
    build:
      context: ./backend/backup
      dockerfile: ./Dockerfile
    volumes:
      - type: bind
        source: ./tmp/app/mig-api
        target: /tmp/source
      - type: volume
        source: api-volume
        target: /tmp/dist
      - type: volume
        source: api-backup-volume
        target: /tmp/back
    command: [ '-a', 'check' ]

  app:
    image: mig-api:latest
    container_name: app
    build:
      context: ./backend
      dockerfile: ./docker/dev/Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/mig
      - SPRING_DATASOURCE_USERNAME=ivan
      - SPRING_DATASOURCE_PASSWORD=pASSword
    networks:
      app-network:
        ipv4_address: 192.168.112.3
    expose:
      - 8080
    volumes:
      - type: volume
        source: api-volume
        target: /tmp/app/mig-api
    depends_on:
      - api-backup
      - db
      - redis
    restart: on-failure

  db:
    image: postgres:15-alpine
    container_name: db
    command:
      - 'postgres'
      - '-c'
      - 'log_min_duration_statement=200ms'
      - '-c'
      - 'idle_in_transaction_session_timeout=10s'
    environment:
      - POSTGRES_USER=ivan
      - POSTGRES_PASSWORD=pASSword
      - POSTGRES_DB=mig
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      app-network:
        ipv4_address: 192.168.112.2
    ports:
      - '5432:5432'
    volumes:
      - type: volume
        source: db-volume
        target: /var/lib/postgresql/data/pgdata
    restart: on-failure
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ivan -d mig']
      interval: 120s
      timeout: 10s
      retries: 3
      start_period: 90s

  pgadmin:
    image: dpage/pgadmin4:8.7
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=ivan.duvanov.3@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=pASSword
      - PGADMIN_CONFIG_SERVER_MODE=False
    networks:
      app-network:
        ipv4_address: 192.168.112.4
    ports:
      - '5050:80'
    volumes:
      - type: volume
        source: pgadmin-volume
        target: /var/lib/pgadmin
    links:
      - db
    depends_on:
      - db
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  redis:
    image: redis:7.0-alpine
    container_name: redis
    networks:
      app-network:
        ipv4_address: 192.168.112.6
    ports:
      - '6379:6379'

#  front:
#    image: front
#    container_name: front
#    build:
#      context: ./kemsu-vue-app
#      dockerfile: ./docker/prod/Dockerfile
#    volumes:
#      - type: volume
#        source: vue-dist
#        target: /front/dist
#    depends_on:
#      - app

  nginx:
    image: nginx:1.27.0
    container_name: nginx
    networks:
      app-network:
        ipv4_address: 192.168.112.5
    ports:
      - '80:80'
    volumes:
      - type: bind
        source: ./nginx/local-conf.d
        target: /etc/nginx/conf.d
      - type: volume
        source: vue-dist
        target: /var/www/html
    depends_on:
      - front

  loki:
    image: grafana/loki:1.4.1
    container_name: loki
    networks:
      app-network:
        ipv4_address: 192.168.112.9
    ports:
      - '3100:3100'
    volumes:
      - type: bind
        source: ./backend/loki
        target: /etc/loki
    command: -config.file=/etc/loki/loki-config.yml

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      app-network:
        ipv4_address: 192.168.112.7
    ports:
      - '9090:9090'
    volumes:
      - type: bind
        source: ./backend/prometheus
        target: /etc/prometheus/
    depends_on:
      - app

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=ivan
      - GF_SECURITY_ADMIN_PASSWORD=1234
    networks:
      app-network:
        ipv4_address: 192.168.112.8
    ports:
      - '3000:3000'
    volumes:
      - type: volume
        source: grafana-volume
        target: /var/lib/grafana
      - type: bind
        source: ./backend/grafana
        target: /etc/grafana/provisioning/datasources:ro
    depends_on:
      - nginx

networks:
  app-network:
    ipam:
      config:
        - subnet: 192.168.112.0/20
          gateway: 192.168.112.1

volumes:
  vue-dist:
    driver: local
  db-volume:
    driver: local
  api-volume:
    driver: local
  api-backup-volume:
    driver: local
  pgadmin-volume:
    driver: local
  grafana-volume:
    driver: local